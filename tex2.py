import streamlit as st
import pandas as pd
import numpy as np
import glob
import os

# Configuration de la page
st.set_page_config(page_title="Dashboard M√©t√©o PAD", layout="wide")

# Titre de l'application
st.title("üå¶Ô∏è Dashboard M√©t√©o - Port Autonome de Douala")

# R√©pertoire contenant les fichiers Excel
DATA_DIR = r"B:\Marine Weather Data\Data Update"

# Lister les fichiers Excel
excel_files = glob.glob(os.path.join(DATA_DIR, "*.xlsx"))

if not excel_files:
    st.error("Aucun fichier Excel trouv√© dans le r√©pertoire sp√©cifi√©.")
    st.stop()

# S√©lection du fichier √† afficher
selected_file = st.sidebar.selectbox("Choisissez un fichier m√©t√©o :", excel_files)

# Lecture du fichier
df = pd.read_excel(selected_file)

# Normalisation des noms de colonnes
df.columns = df.columns.str.strip().str.upper().str.replace(" ", "_")

# Conversion des valeurs avec virgules
for col in df.columns:
    if col not in ["DATETIME", "STATION_ID"]:
        df[col] = (df[col].astype(str)
                   .str.replace(",", ".", regex=False)
                   .replace("9999.999", np.nan)
                   .astype(float))

# Remplacer les 9999.999 r√©siduels par NaN
df.replace(9999.999, np.nan, inplace=True)

# Interpolation lin√©aire
df.interpolate(method='linear', limit_direction='both', inplace=True)

# On conserve le jeu de donn√©es complet pour le t√©l√©chargement si besoin
full_df = df.copy()

# On travaille sur les 10 derni√®res observations pour les affichages et graphiques
recent_data = df.tail(10).copy()

# Affichage des 10 derni√®res valeurs
st.subheader("üìä Derni√®res Observations")
for _, row in recent_data.iterrows():
    st.markdown(
        f"""
        **üïí {row['DATETIME']}**  
        üå°Ô∏è **{row.get('AIR_TEMPERATURE', np.nan):.1f} ¬∞C** &nbsp;&nbsp;
        üíß **{row.get('HUMIDITY', np.nan):.0f}%** &nbsp;&nbsp;
        üí® **{row.get('WIND_SPEED', 0):.1f} km/h** &nbsp;&nbsp;
        üìà **{row.get('AIR_PRESSURE', 0):.1f} hPa**
        ---
        """,
        unsafe_allow_html=True
    )

# Affichage de m√©triques moyennes calcul√©es sur ces 10 derni√®res observations
st.subheader("üìå Statistiques Moyennes (10 derni√®res observ.)")
cols = st.columns(3)
metrics = {
    "AIR_TEMPERATURE": ("Temp√©rature", "¬∞C"),
    "HUMIDITY": ("Humidit√©", "%"),
    "AIR_PRESSURE": ("Pression", "hPa"),
    "DEWPOINT": ("Point de ros√©e", "¬∞C"),
    "WIND_SPEED": ("Vent", "km/h")
}
for i, (col, (label, unit)) in enumerate(metrics.items()):
    if col in recent_data.columns:
        mean_val = recent_data[col].mean()
        cols[i % 3].metric(label, f"{mean_val:.1f} {unit}")

# Pr√©paration des donn√©es graphiques √† partir des 10 derni√®res observations
st.subheader("üìà √âvolution des param√®tres (10 derni√®res observations)")
if "DATETIME" in recent_data.columns:
    # Assurez-vous que DATETIME est de type datetime si ce n'est pas d√©j√† le cas
    recent_data["DATETIME"] = pd.to_datetime(recent_data["DATETIME"])
    recent_data.set_index("DATETIME", inplace=True)
elif recent_data.index.name != "DATETIME":
    st.warning("La colonne DATETIME n'est pas trouv√©e ou n'est pas reconnue.")

# Pour chaque param√®tre, on affiche une courbe de tendance
for param in ["AIR_TEMPERATURE", "AIR_PRESSURE", "HUMIDITY", "WIND_SPEED", "DEWPOINT"]:
    if param in recent_data.columns:
        st.markdown(f"**√âvolution de {param.replace('_', ' ')}**")
        st.line_chart(recent_data[param], height=200)

# Option de t√©l√©chargement : les donn√©es compl√®tes corrig√©es
st.sidebar.download_button(
    label="üì• T√©l√©charger les donn√©es corrig√©es",
    data=full_df.to_csv(index=False).encode("utf-8"),
    file_name="donnees_meteo_corrigees.csv",
    mime="text/csv"
)